import{A as c}from"./index-D4ghqIDk.js";class s{async searchPatients(e){try{if(console.log("Searching for patients with query:",e),!e||e.trim()==="")return console.warn("Empty search query provided"),[];const r=await c.get("/api/v1/admin/patients/search",{query:e.trim()});return console.log("Patient search response:",r),r&&r.data&&Array.isArray(r.data)&&this.cachePatients(r.data),r.data||[]}catch(r){if(console.error("Error searching for patients:",r),r.isNetworkError)return console.log("Network error, trying cached results"),this.searchCachedPatients(e);throw r}}async getAllPatients(e=1,r=10){try{return(await c.get("/api/v1/admin/patients",{page:e,limit:r})).data||[]}catch(a){throw console.error("Error getting all patients:",a),a}}async getPatientById(e){try{if(!e)throw new Error("Patient ID is required");return(await c.get(`/api/v1/admin/patients/${e}`)).data||null}catch(r){throw console.error(`Error getting patient with ID ${e}:`,r),r}}cachePatients(e){try{if(!Array.isArray(e)||e.length===0)return;let r=[];const a=localStorage.getItem("jantungin_cached_patients");if(a)try{r=JSON.parse(a)}catch(n){console.error("Error parsing cached patients:",n),r=[]}const t=new Map(r.map(n=>[n.id,n]));e.forEach(n=>{t.set(n.id,n)});const o=Array.from(t.values());localStorage.setItem("jantungin_cached_patients",JSON.stringify(o)),console.log(`Cached ${e.length} patients, total cache size: ${o.length}`)}catch(r){console.error("Error caching patients:",r)}}getCachedPatients(){try{const e=localStorage.getItem("jantungin_cached_patients");return e?JSON.parse(e):[]}catch(e){return console.error("Error getting cached patients:",e),[]}}searchCachedPatients(e){try{if(!e)return[];const r=this.getCachedPatients();if(r.length===0)return[];const a=e.toLowerCase();return r.filter(t=>t.name&&t.name.toLowerCase().includes(a)||t.nik&&t.nik.includes(e)||t.id&&t.id.toString()===e)}catch(r){return console.error("Error searching cached patients:",r),[]}}}const l=new s;export{l as default};
